      ___                   ___           ___           ___           ___           ___           ___           ___           ___     
     /\__\      ___        /\__\         /\  \         /\  \         /\  \         /\  \         /\  \         /\  \         /\  \    
    /:/  /     /\  \      /:/  /        /::\  \       /::\  \       /::\  \       /::\  \       /::\  \       /::\  \       /::\  \   
   /:/  /      \:\  \    /:/  /        /:/\:\  \     /:/\:\  \     /:/\:\  \     /:/\:\  \     /:/\:\  \     /:/\:\  \     /:/\:\  \  
  /:/  /       /::\__\  /:/__/  ___   /::\~\:\  \   /:/  \:\  \   /:/  \:\  \   /:/  \:\__\   /::\~\:\  \   /::\~\:\  \   /::\~\:\  \ 
 /:/__/     __/:/\/__/  |:|  | /\__\ /:/\:\ \:\__\ /:/__/ \:\__\ /:/__/ \:\__\ /:/__/ \:|__| /:/\:\ \:\__\ /:/\:\ \:\__\ /:/\:\ \:\__\
 \:\  \    /\/:/  /     |:|  |/:/  / \:\~\:\ \/__/ \:\  \  \/__/ \:\  \ /:/  / \:\  \ /:/  / \:\~\:\ \/__/ \/__\:\/:/  / \/_|::\/:/  /
  \:\  \   \::/__/      |:|__/:/  /   \:\ \:\__\    \:\  \        \:\  /:/  /   \:\  /:/  /   \:\ \:\__\        \::/  /     |:|::/  / 
   \:\  \   \:\__\       \::::/__/     \:\ \/__/     \:\  \        \:\/:/  /     \:\/:/  /     \:\ \/__/        /:/  /      |:|\/__/  
    \:\__\   \/__/        ~~~~          \:\__\        \:\__\        \::/  /       \::/__/       \:\__\         /:/  /       |:|  |    
     \/__/                               \/__/         \/__/         \/__/         ~~            \/__/         \/__/         \|__|    


					presents this RAMPCODE tutorial by GEDE



livecodear.github.io

talk.lurk.org #live-coding-argentina

Livecodear (Telegram bot)

special THX to munshkr for his help and all local crew 4 their support <3



"-------------------------------------------------------------- 0.INITIAL NOTE"

By default, you have 1 cycle per second but you can change it with r@:

r@0.5;	half speed
r@1;	return to default

"------------------------------------------------- 1. CHANNELS AND EXPRESSIONS"


Rampcode has 8 channels (0-7). Send a msg to a channel with c:

c0 @ s(t) *0.1; 	press ctrl+e here to evaluate
c0 @ 0;			and here to stop the sound

When we say that rampcode is inspided by bytebeat we mean all output is
a function/expression of time. Let's see...

c0 	tells that the following msg goes to channel 0
@  	separates arguments
s(t)	s=sin. Since time (t) here is a regular counter, it returns a sinewave.
*0.1	multiplies the sine result, so it works as amplitude.
;	tells this is the end of the msg.

VERY IMPORTANT NOTE: While I find a way to fix it, NEVER EVALUATE 
A * CHAR ISOLATED WITH SPACES " * ". IT FREEZES PUREDATA.

Understanding expressions is crucial since what you'll hear is result of them.
I'll give you some basic examples (if you don't get it DON'T WORRY, SKIP any
part of the tuto and take your time):

c0 @ s(t/2) *0.1;			divide or multiply to change pitch
c0 @ s(t*2) *0.1;
c0 @ 0;

c0 @ s(t/3) *0.05 + s(t/4) *0.05;	additive synthesis
c0 @ s(t/2) *s(t/500) *0.1;		AM
c0 @ s(t/2) *s(t/500) *10%10/10 *0.1;	same distorted
c0 @ 0;

c0 @ s(t/4 +s(t/4) *2) *0.1;		2op FM
c0 @ s(t/4 +s(t/4) *s(t/1000) *2) *0.1;	3op FM
c0 @ 0;

c0 @ s(t*t) *0.05;			crazy stuff
c0 @ s(t*s(t)) *0.05;			noise
c0 @ 0;

c0 @ (t%100/100) *0.1;				saw wave
c0 @ (t%100/100) *0.1 + (t%101/101) *0.1; 	modulated by additive
c0 @ 0;

c0 @ (t%100 < 50) *0.1;				square wave
c0 @ (t%100 < t/200%100) *0.1;			pwm
c0 @ 0;

You see that expressions are not just math but also logic...
Some elegant examples of bytebeat using bitwise ops:

c0 @ ( t & t>>8 ) %64/64 *0.1;

c0 @ ( t*2 | t>>4 ) %256/256 *0.1;

c0 @ ( t ^ t%257 ) %256/256 *0.1;

c0 @ ( t*3 ^ t%250 | t>>4 ) %256/256 *0.1;

c0 @ ( t & t>>8 & t/16 ) %64/64 *0.1;

c0 @ 0;


"---------------------------------------------------------------- 2. ENVELOPES"


Ok. Time to give some rythm! 
Use e and E to select the curve and subdivission of the envelope:

c0@ s(t*t) *0.1 *e9; change the 9 with any 0-9 number and hear the difference.

c0@ s(t*t) *0.1 *E14; 1 is the subdivission and 4 the curve, play with them.

e is just a short for E8x

i and I have the same behaviour but with reverse:

c0@ s(t*t) *0.1 *I19;


"----------------------------------------------------------------- 3. COUNTERS"


' and # are counters.
Counters are very usefull, they can work as triggers or sequences, etc.

	Triggers:


c0@ s(t*t) *0.1 *e4 *(#8<4); 	If the counter 0-7 is less than 4 then gives 1

c0@ s(t*t) *0.1 *e4 *(#9>#4);	A more interesting calculation

c0@ s(t*t) *0.1 *e2 *(#4==0 | #3>1); combine them!


' works like E for counters, first number is the time(in subdv) of the count:


c0@ s(t*t) *e8 *0.1 *('12==0); first of 2 cycles gives 1, second 0

c0@ s(t*t) *e4 *0.1 *(#3<2 | '14==0); first of 4 cycles gives 1

c0@ 0;

		Sequences:

c0@ s(t/#8) *e3 *0.1;

c0@ s(t/(2-#8)) *e3 *0.1;

c0@ s(t/(2+'14)) *e3 *0.1;

c0@ s(t/(#8/#3)) *e3 *0.1;

c0@ s(t/(1+#8/#3)*(1+'13)) *e3 *0.1;

		and why not

c0@ s(t*t) *0.05 *'12 + s(t/8) *e1 *0.2 *(#8==4|#8==6) + s(t*s(t%16)) *E19 *0.1;

c0@ 0;

but I think you rather use more channels istead jeje


"------------------------------------------------------------------- 4. RANDOM"


How can you resist the enchant of randomness? I can't, so you have one random
value per expression (you'll understand why later). 

c0@ s(t) *e3 *(x<0.5) *0.1;	x is float between 0-1
c1@ s(t/X8) *e3 *0.1;		X is interger between 0 and the next number

v@2;			v controlls the global random time(in subdv)
c0@ 0; c1@ 0;


"---------------------------------------------------------------------- 5. FXS"


There is a chain of 4 fxs per channel: filter -> delay -> s&h -> pan

v@8; c0@ s(t/X8+s(t)) *e1 *0.1;

f0 @ 9 @ 1000;			filter: q (not an expression!) @ freq (hz)

f0 @ 5 @ x*4000;

f0 @ 0 @ 0;

d0 @ 0.5 @ 250;			delay: feedback @ ms

d0 @ x @ x*30;			random

d0 @ 0.5 @ t%150;		alien effect

d0 @ 0.8 @ t/100%100*0.1;	phaser	

h0 @ 1 @ 4000;			sample and hold: dry/wet @ hold (hz)

h0 @ 1 @ 1+X8*8000;		

p0 @ 0;				pan (0-1)
p0 @ x;
p0 @ 0.5;			center

IMPORTANT NOTE: THE CHAIN IS CLEARED WITH EVERY c@ MSG
It is very recommended to include all ch msgs in a line to evaluate together:

c0 @ s(t*t) *0.1 *e1 ; f0 @ 5 @ x*8000;


"------------------------------------------------------------------ 6. SAMPLES"


Rampcode can manipulate samples from a wav file contained in /samples and
named correctly.

l0 @ 5 ; 		load 5.wav as channel 0 (not an expression!)

w0 @ 0.1 @ t*5%W ;	play total samples (W) at t*5 speed with 0.1 amplitude

w0 @ 0.1 @ W - t*5%W;	reverse

w0 @ 0.1 @ t*6%(W/200) + t%W;	t*6 W/200 grain, t speed

w0 @ 0.2 @ t*3%(W/500) + W*x;  t*3 W/500 grain, random offset

"------------------------------------------------------------------- 7.EXAMPLE"

Let that random offset playing and run line by line 

c1 @ s(t/#8*#5)*0.1 *e2; p1 @ x; d1 @ 0.5 @ 250;

c2 @ s(t/9)*e8 *(#8%5==0 & '12==0); f2 @ 1 @ 200;

c3 @ s(t*s(t%16))*0.1 *e1 *(#8==4 | '48==7);

c4 @ s(t/8*#4+s(t/8/(1+#3))*s(t/1234)*10)*20%10/10*0.15 *e2 *('18<2); f4 @ 0.075 @ 100; d4 @ x @ x*30;

c5 @ s(t*t) *0.05 *e8 *('14>1) ; d5 @ (x<0.5) @ 125/2;

c5@0;
c4@0;
c3@0;
c2@0;
c1@0;
c0@0;

Thanks for using rampcode, please don't hesitate to contact me and help me to improve it :)
