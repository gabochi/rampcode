
# RAMPCODE
# ========

# KEYS
# 
# <F2> evaluate current line 
# <F5> stop the sound
# <F3> random effect (beta)
# <F4> return to normal
# <F6> change speed

# OPERATORS
# ---------
#
# KEYWORD	DESCRIPTION			EXAMPLES
#
# t		counter				
						t
# r l		bitshifters			
						t 3l
						t 2l
						t 2r
						tt l
						tt r
# a o x		AND OR XOR (bitwise)		
						t t5r a
						t t5r o
						t t5r x
						t 64a
						t t10r3a l 
						t t10r3a3x l
						t t9r3a3x l
						t t8r3a3x l t4ra 
						t t8r3a3x l t4ro 
# + - m d	arithmetics			
						t1 1+ l
						tt3ra 1-
						t 3m
						t8rta t10rm
						t 3d
						t3m t7d o
						t9r42a tm
# M		modulo (%)			
						t t255M x
						t t131M x
						t t10r7a5M l
						t t8.001d5Md 5l
						t1l t7r255M127-b a
# E L G N	equal lesser greater not	
						tt8r3a3xl t10r3a 0E m
# I		if then else			
						t10r3a0G tt10r7am tt8r3a3xl I
# n		12-TET note (relative to t)	
						24 n
						t9r63a63x n
						t10r2.5m15M n 2l
# i		integer				
# b		abs
# p		power
# s		sine (-1 1)			
						36n t140ds 20m+
						t10rs 64m64+ in
						t10rs 128mb n
						t2l t t11rs3m3+ ro
						t2l t t11rs6mbro

# SCRIPT FUNCTIONS
# ----------------
#
# dup		duplicate			
						$(dup 24n) 1.03m o
						$(dup 12n) 3.01m o
						$(dup t10r2.5m15M n) 3.03m x 
# bin		binary sequencer (2 args)		
						tt8r3a3xl $(bin 01010001 t10r7a)
# euc		euclidean sequencer (2 args)		
						t3l $(euc t10r 5) t1lt4ro x
# mod		modulo sequencer (2 args)		
 						t4l $(mod t10r 3) t1lt4ro x
# hex		hexadecimal value		
						t $(hex c) n
# seq		hexadecimal sequencer (1 arg)		
						t $(seq $(hex 047c) t10r3a) n 2l
				t $(seq $(hex 047c) t10r3a) t14r1a+ n 3l
			t $(seq $(hex 047c) t15r1a $(hex 100) m- t10r3a) n 3l


# sca		play a sequence of notes (1 arg)	
						$(sca ${jon}t10r) 2l
						$(sca $jon t10rs 8mb) 2l
						$(sca $jon t10rs 4m4+) 2l
#
# 						SCALES
# 						------
#				 		modal: jon dor fri lid mli aeo
#				 		penta: pma pmi bma bmi
#				 		other: arm art

# MORE TRICKS
# -----------

# Pitch down for percussive effects
 t t7r7a7x m
 t t7r7a7x l
 t t9r3a3x l

# Insert sequences in speed and range
 t t t11r2.7m5M5+r7a7x l 3r 
 t t t11r1.7m5M6+r7a7x m  

# Big range, divide, use sine func
 t 3 r255a255xtm 4 r
 256t 3 r255ad  999 m
 256t 3 r255ads 127 m 128a
 
# Interesting wrap effect
 t 3 rta 12-
 t t10r7a rta 1-
 t 3 rta t12r7a2m-
 t127a t6r127a -

# Economic logical sequences
 $(sca $jon t10rt11rx) 3l 127a

# Euclidean sequences 
 $(sca $jon t10rt11rx) 3l $(euc t10r 7) 127a
# Rotate
 $(sca $jon t10rt11rx) 3l $(euc t10r1+ 7) 127a
# Build patterns with rotation
 $(sca $jon t10rt11rx) 1l $(euc t10rt15r1a+ 7) 127a

# Sequence intervention (sequences inside sequences)
 $(sca $arm t10r t12r7a+) 3l 64a
# FM with sine func
 $(sca $arm t10r t12r7a+) t120ds2m+ 3l 64a
# Change scale values with hex
 $(sca $jon $(hex 1000) t13r1am+ t10r) 3l 64a

# Best control with seq func
 $(seq $(hex 237) t14r1a+ t10r3a) n 2l 127a
# Playing with octaves
 $(seq $(hex 237) t14r1a+ t10r3a) n t12rt11rx5M1+l 127a
# Speed sequence
 $(seq $(hex 237) t14r1a+ t $(seq $(hex 7ab9a8b) t13r6M) r3a) n t12rt11rx5M1+l 127a
# Glitchy modulation using wrap effect
 $(seq $(hex 237) t14r1a+ t $(seq $(hex 7ab9a8b) t13r6M) r3a) n t12rt11rx5M1+l 127a t5r127a- 
# Control amplitudes and mix with operators
 $(seq $(hex 237) t14r1a+ t $(seq $(hex 7ab9a8b) t13r6M) r3a) n t12rt11rx5M1+l 127a t10r3a3xtm 128a o

# Kicks are never enought
t1rt9r3a3xmt7r3a3xl

# Distortion, harmonic? noise, xor and modulo instant sequencer
t t10r3a l
t t31M+ t10r3a l

t 3 l t 7 l t 10 r 54 x 131 M M + t 10 r 13 x 15 M 7 a 1 - d 128 a

t 876 x 5 M 6 l
t1r t10r67x9999M x 5M 6l


# or wrap

t 100 o 1 +

# xor seq

t t 10 r 75 x l
